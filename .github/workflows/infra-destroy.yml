name: Infrastructure Destroy Pipeline

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to destroy (dev, stage, prod, or all)'
        required: true
        type: choice
        options:
        - dev
        - stage
        - prod
        - all
      module:
        description: 'Module to destroy (bootstrap-backend, gke-infra, or all)'
        required: true
        type: choice
        options:
        - bootstrap-backend
        - gke-infra
        - all
      confirm_destroy:
        description: 'Type DESTROY to confirm destruction'
        required: true
        type: string
      dry_run:
        description: 'Perform dry run only (show what would be destroyed)'
        required: false
        type: boolean
        default: true

env:
  TF_VERSION: "1.6.0"
  TF_LOG: INFO

jobs:
  validate-inputs:
    name: Validate Destroy Request
    runs-on: ubuntu-latest
    outputs:
      environments: ${{ steps.set-matrix.outputs.environments }}
      modules: ${{ steps.set-matrix.outputs.modules }}
    steps:
      - name: Validate Confirmation
        run: |
          if [ "${{ github.event.inputs.confirm_destroy }}" != "DESTROY" ]; then
            echo "❌ Destruction not confirmed. Please type DESTROY to confirm."
            exit 1
          fi
          echo "✅ Destruction confirmed"
      
      - name: Set Matrix Values
        id: set-matrix
        run: |
          # Set environments
          if [ "${{ github.event.inputs.environment }}" = "all" ]; then
            echo "environments=[\"dev\",\"stage\",\"prod\"]" >> $GITHUB_OUTPUT
          else
            echo "environments=[\"${{ github.event.inputs.environment }}\"]" >> $GITHUB_OUTPUT
          fi
          
          # Set modules
          if [ "${{ github.event.inputs.module }}" = "all" ]; then
            echo "modules=[\"gke-infra\",\"bootstrap-backend\"]" >> $GITHUB_OUTPUT
          else
            echo "modules=[\"${{ github.event.inputs.module }}\"]" >> $GITHUB_OUTPUT
          fi

  query-resources:
    name: Query GCP Resources
    runs-on: ubuntu-latest
    needs: validate-inputs
    strategy:
      matrix:
        environment: ${{ fromJson(needs.validate-inputs.outputs.environments) }}
        module: ${{ fromJson(needs.validate-inputs.outputs.modules) }}
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
          project_id: ${{ secrets.GOOGLE_PROJECT_ID }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Initialize Terraform
        run: |
          cd ${{ matrix.module }}
          terraform init -input=false
          
          # Select workspace for gke-infra
          if [ "${{ matrix.module }}" = "gke-infra" ]; then
            terraform workspace select ${{ matrix.environment }} || {
              echo "⚠️ Workspace ${{ matrix.environment }} doesn't exist"
              exit 0
            }
          fi
      
      - name: Query Terraform State
        run: |
          cd ${{ matrix.module }}
          
          echo "## Terraform State Resources for ${{ matrix.module }} (${{ matrix.environment }})"
          echo "================================================================="
          
          if terraform state list 2>/dev/null; then
            echo ""
            echo "### Resource Details:"
            echo "-------------------"
            terraform state list | while read resource; do
              echo "📦 Resource: $resource"
              terraform state show "$resource" | head -10
              echo ""
            done
          else
            echo "ℹ️ No resources found in Terraform state"
          fi
      
      - name: Query GCP Resources by Labels/Tags
        run: |
          echo "## GCP Resources by Project"
          echo "=========================="
          
          PROJECT_ID="${{ secrets.GOOGLE_PROJECT_ID }}"
          
          echo "### Compute Instances:"
          gcloud compute instances list --project=$PROJECT_ID --format="table(name,zone,status,machineType)" || echo "No compute instances found"
          
          echo ""
          echo "### GKE Clusters:"
          gcloud container clusters list --project=$PROJECT_ID --format="table(name,location,status,currentNodeCount)" || echo "No GKE clusters found"
          
          echo ""
          echo "### Storage Buckets:"
          gsutil ls -p $PROJECT_ID || echo "No storage buckets found"
          
          echo ""
          echo "### Load Balancers:"
          gcloud compute forwarding-rules list --project=$PROJECT_ID --format="table(name,region,IPAddress,target)" || echo "No load balancers found"
          
          echo ""
          echo "### VPC Networks:"
          gcloud compute networks list --project=$PROJECT_ID --format="table(name,subnet_mode,bgp_routing_mode)" || echo "No VPC networks found"
          
          echo ""
          echo "### Firewall Rules:"
          gcloud compute firewall-rules list --project=$PROJECT_ID --format="table(name,direction,priority,sourceRanges.list():label=SRC_RANGES)" || echo "No firewall rules found"
          
          echo ""
          echo "### Service Accounts:"
          gcloud iam service-accounts list --project=$PROJECT_ID --format="table(email,displayName,disabled)" || echo "No service accounts found"
          
          echo ""
          echo "### Cloud SQL Instances:"
          gcloud sql instances list --project=$PROJECT_ID --format="table(name,database_version,region,tier,status)" 2>/dev/null || echo "No Cloud SQL instances found"

  destroy-plan:
    name: Create Destroy Plan
    runs-on: ubuntu-latest
    needs: [validate-inputs, query-resources]
    strategy:
      matrix:
        environment: ${{ fromJson(needs.validate-inputs.outputs.environments) }}
        module: ${{ fromJson(needs.validate-inputs.outputs.modules) }}
    concurrency:
      group: destroy-plan-${{ matrix.module }}-${{ matrix.environment }}
      cancel-in-progress: false
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
          project_id: ${{ secrets.GOOGLE_PROJECT_ID }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Terraform Init
        run: |
          cd ${{ matrix.module }}
          terraform init -input=false
          
          # Select workspace for gke-infra
          if [ "${{ matrix.module }}" = "gke-infra" ]; then
            terraform workspace select ${{ matrix.environment }} || {
              echo "⚠️ Workspace ${{ matrix.environment }} doesn't exist, skipping"
              exit 0
            }
          fi
      
      - name: Create Destroy Plan
        run: |
          cd ${{ matrix.module }}
          
          # Check if tfvars file exists
          if [ ! -f "environments/${{ matrix.environment }}.tfvars" ]; then
            echo "⚠️ No tfvars file found for ${{ matrix.environment }}, skipping"
            exit 0
          fi
          
          echo "🗑️ Creating destroy plan for ${{ matrix.module }} (${{ matrix.environment }})"
          terraform plan -destroy \
            -var-file="environments/${{ matrix.environment }}.tfvars" \
            -input=false \
            -out=destroy-plan \
            -detailed-exitcode || {
              exit_code=$?
              if [ $exit_code -eq 2 ]; then
                echo "✅ Destroy plan created successfully (changes detected)"
              elif [ $exit_code -eq 0 ]; then
                echo "ℹ️ No resources to destroy"
              else
                echo "❌ Destroy plan failed"
                exit 1
              fi
            }
          
          # Show the destroy plan
          echo "## Destroy Plan Summary"
          echo "======================="
          terraform show -no-color destroy-plan > destroy-plan.txt
          cat destroy-plan.txt
      
      - name: Upload Destroy Plan
        uses: actions/upload-artifact@v4
        with:
          name: destroy-plan-${{ matrix.module }}-${{ matrix.environment }}
          path: |
            ${{ matrix.module }}/destroy-plan
            ${{ matrix.module }}/destroy-plan.txt
          retention-days: 7

  destroy-resources:
    name: Destroy Resources
    runs-on: ubuntu-latest
    needs: [validate-inputs, destroy-plan]
    if: github.event.inputs.dry_run != 'true'
    strategy:
      # Destroy in reverse order: gke-infra first, then bootstrap-backend
      matrix:
        include:
          - environment: dev
            module: gke-infra
            order: 1
          - environment: stage  
            module: gke-infra
            order: 1
          - environment: prod
            module: gke-infra
            order: 1
          - environment: dev
            module: bootstrap-backend
            order: 2
          - environment: stage
            module: bootstrap-backend
            order: 2
          - environment: prod
            module: bootstrap-backend
            order: 2
    concurrency:
      group: destroy-${{ matrix.module }}-${{ matrix.environment }}
      cancel-in-progress: false
    environment: 
      name: destroy-${{ matrix.environment }}
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Filter Matrix
        id: filter
        run: |
          # Check if this combination should run based on inputs
          should_run=false
          
          # Check environment
          if [ "${{ github.event.inputs.environment }}" = "all" ] || [ "${{ github.event.inputs.environment }}" = "${{ matrix.environment }}" ]; then
            # Check module
            if [ "${{ github.event.inputs.module }}" = "all" ] || [ "${{ github.event.inputs.module }}" = "${{ matrix.module }}" ]; then
              should_run=true
            fi
          fi
          
          echo "should_run=$should_run" >> $GITHUB_OUTPUT
          
          if [ "$should_run" = "false" ]; then
            echo "⏭️ Skipping ${{ matrix.module }} (${{ matrix.environment }}) - not selected"
          fi
      
      - name: Authenticate to Google Cloud
        if: steps.filter.outputs.should_run == 'true'
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
          project_id: ${{ secrets.GOOGLE_PROJECT_ID }}
      
      - name: Setup Terraform
        if: steps.filter.outputs.should_run == 'true'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Setup gcloud CLI
        if: steps.filter.outputs.should_run == 'true'
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Download Destroy Plan
        if: steps.filter.outputs.should_run == 'true'
        uses: actions/download-artifact@v4
        with:
          name: destroy-plan-${{ matrix.module }}-${{ matrix.environment }}
          path: ${{ matrix.module }}
      
      - name: Terraform Init
        if: steps.filter.outputs.should_run == 'true'
        run: |
          cd ${{ matrix.module }}
          terraform init -input=false
          
          # Select workspace for gke-infra
          if [ "${{ matrix.module }}" = "gke-infra" ]; then
            terraform workspace select ${{ matrix.environment }} || {
              echo "⚠️ Workspace ${{ matrix.environment }} doesn't exist, skipping"
              exit 0
            }
          fi
      
      - name: Final Confirmation Check
        if: steps.filter.outputs.should_run == 'true'
        run: |
          echo "🚨 FINAL WARNING: About to destroy resources!"
          echo "Module: ${{ matrix.module }}"
          echo "Environment: ${{ matrix.environment }}"
          echo "Project: ${{ secrets.GOOGLE_PROJECT_ID }}"
          echo ""
          echo "Resources that will be destroyed:"
          cd ${{ matrix.module }}
          if [ -f destroy-plan.txt ]; then
            cat destroy-plan.txt | grep "will be destroyed" || echo "No destroy actions found"
          fi
      
      - name: Terraform Destroy
        if: steps.filter.outputs.should_run == 'true'
        id: destroy
        run: |
          cd ${{ matrix.module }}
          
          echo "🗑️ Applying destroy plan for ${{ matrix.module }} (${{ matrix.environment }})"
          terraform apply -input=false -auto-approve destroy-plan
          
          echo "✅ Resources destroyed successfully"
          echo "destroyed=true" >> $GITHUB_OUTPUT
      
      - name: Verify Destruction
        if: steps.filter.outputs.should_run == 'true' && steps.destroy.outputs.destroyed == 'true'
        run: |
          cd ${{ matrix.module }}
          
          echo "🔍 Verifying destruction..."
          remaining_resources=$(terraform state list 2>/dev/null | wc -l)
          
          if [ "$remaining_resources" -eq 0 ]; then
            echo "✅ All resources destroyed successfully"
          else
            echo "⚠️ Some resources may still exist:"
            terraform state list
          fi
      
      - name: Cleanup State Files
        if: steps.filter.outputs.should_run == 'true' && matrix.module == 'bootstrap-backend'
        continue-on-error: true
        run: |
          # Optionally remove the state bucket (be very careful with this)
          # Uncomment only if you want to completely remove the state storage
          # BUCKET_NAME="${{ secrets.GOOGLE_PROJECT_ID }}-tfstate-${{ matrix.environment }}-cicd"
          # echo "🗑️ Removing state bucket: $BUCKET_NAME"
          # gsutil rm -r "gs://$BUCKET_NAME" || echo "State bucket may not exist or already removed"
          echo "ℹ️ State bucket cleanup skipped (enable manually if needed)"
      
      - name: Notify Success
        if: steps.filter.outputs.should_run == 'true' && success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            🗑️ Infrastructure destruction completed successfully!
            Module: ${{ matrix.module }}
            Environment: ${{ matrix.environment }}
            Triggered by: ${{ github.actor }}
            Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      
      - name: Notify Failure
        if: steps.filter.outputs.should_run == 'true' && failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            ❌ Infrastructure destruction failed!
            Module: ${{ matrix.module }}
            Environment: ${{ matrix.environment }}
            Triggered by: ${{ github.actor }}
            Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            Please check the logs and manual cleanup may be required.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  cleanup-report:
    name: Cleanup Report
    runs-on: ubuntu-latest
    needs: [validate-inputs, destroy-resources]
    if: always() && (success() || failure())
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
          project_id: ${{ secrets.GOOGLE_PROJECT_ID }}
      
      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Generate Final Report
        run: |
          echo "# Infrastructure Destruction Report" > destruction-report.md
          echo "Generated: $(date)" >> destruction-report.md
          echo "" >> destruction-report.md
          
          echo "## Input Parameters" >> destruction-report.md
          echo "- Environment: ${{ github.event.inputs.environment }}" >> destruction-report.md
          echo "- Module: ${{ github.event.inputs.module }}" >> destruction-report.md
          echo "- Dry Run: ${{ github.event.inputs.dry_run }}" >> destruction-report.md
          echo "- Triggered by: ${{ github.actor }}" >> destruction-report.md
          echo "" >> destruction-report.md
          
          echo "## Remaining GCP Resources" >> destruction-report.md
          echo "The following resources remain in the GCP project:" >> destruction-report.md
          echo "" >> destruction-report.md
          
          PROJECT_ID="${{ secrets.GOOGLE_PROJECT_ID }}"
          
          echo "### Compute Resources" >> destruction-report.md
          if gcloud compute instances list --project=$PROJECT_ID --format="table(name,zone,status)" 2>/dev/null | tail -n +2 | grep -q .; then
            gcloud compute instances list --project=$PROJECT_ID --format="table(name,zone,status)" >> destruction-report.md
          else
            echo "No compute instances remaining ✅" >> destruction-report.md
          fi
          echo "" >> destruction-report.md
          
          echo "### GKE Clusters" >> destruction-report.md
          if gcloud container clusters list --project=$PROJECT_ID --format="table(name,location,status)" 2>/dev/null | tail -n +2 | grep -q .; then
            gcloud container clusters list --project=$PROJECT_ID --format="table(name,location,status)" >> destruction-report.md
          else
            echo "No GKE clusters remaining ✅" >> destruction-report.md
          fi
          echo "" >> destruction-report.md
          
          echo "### Storage Buckets" >> destruction-report.md
          if gsutil ls -p $PROJECT_ID 2>/dev/null | grep -q .; then
            gsutil ls -p $PROJECT_ID >> destruction-report.md
          else
            echo "No storage buckets remaining ✅" >> destruction-report.md
          fi
          echo "" >> destruction-report.md
          
          echo "## Manual Cleanup Required" >> destruction-report.md
          echo "If any resources remain above, they may need manual cleanup:" >> destruction-report.md
          echo "1. Check if resources are managed outside Terraform" >> destruction-report.md
          echo "2. Verify resource dependencies" >> destruction-report.md
          echo "3. Use gcloud CLI for manual removal if needed" >> destruction-report.md
          echo "4. Check for any orphaned resources not shown above" >> destruction-report.md
          
          cat destruction-report.md
      
      - name: Upload Report
        uses: actions/upload-artifact@v4
        with:
          name: destruction-report
          path: destruction-report.md
          retention-days: 30