name: Infrastructure CD Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'bootstrap-backend/**'
      - 'gke-infra/**'
      - 'infra/terraform/**'
      - '.github/workflows/infra-cd.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'bootstrap-backend/**'
      - 'gke-infra/**'
      - 'infra/terraform/**'

env:
  TF_VERSION: "1.6.0"
  TF_LOG: INFO

jobs:
  security-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          quiet: true
          soft_fail: true
          framework: terraform
          output_format: sarif
          output_file_path: checkov-results.sarif
          baseline: .checkov.baseline
          
      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif
          
      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: .
          format: sarif
          soft_fail: true
          
      - name: Run Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          hide-progress: false
          format: 'sarif'
          output: 'trivy-iac-results.sarif'

  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: security-scan
    strategy:
      fail-fast: false
      matrix:
        environment: [dev, stage, prod]
        module: [bootstrap-backend, gke-infra]
    permissions:
      contents: read
      pull-requests: write
      id-token: write  # Required for Workload Identity
    steps:
      - uses: actions/checkout@v4
      
      # Use Workload Identity Federation instead of service account key
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
          project_id: ${{ secrets.GOOGLE_PROJECT_ID }}
          token_format: 'access_token'
          access_token_lifetime: '3600s'
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        
      # REMOVED: The problematic "Create Terraform variable files if missing" step
      # We now use the committed environment-specific .tfvars files
      
      - name: Verify Environment Files Exist
        run: |
          echo "Checking for environment files..."
          if [ -f "${{ matrix.module }}/environments/${{ matrix.environment }}.tfvars" ]; then
            echo "✅ Found ${{ matrix.module }}/environments/${{ matrix.environment }}.tfvars"
            echo "File contents (first 5 lines):"
            head -5 "${{ matrix.module }}/environments/${{ matrix.environment }}.tfvars"
          else
            echo "❌ Missing ${{ matrix.module }}/environments/${{ matrix.environment }}.tfvars"
            echo "Available files in ${{ matrix.module }}/environments/:"
            ls -la "${{ matrix.module }}/environments/" || echo "No environments directory"
            exit 1
          fi
      
      - name: Terraform Init
        run: |
          cd ${{ matrix.module }}
          terraform init -input=false
          
      - name: Terraform Validate
        run: |
          cd ${{ matrix.module }}
          terraform validate
          
      - name: Terraform Format Check
        run: |
          cd ${{ matrix.module }}
          terraform fmt -check=true -diff=true
        continue-on-error: true  # Don't fail the job on format issues
        
      - name: Terraform Plan
        run: |
          cd ${{ matrix.module }}
          if [ "${{ matrix.module }}" = "gke-infra" ]; then
            # Create workspace if it doesn't exist
            terraform workspace select ${{ matrix.environment }} || terraform workspace new ${{ matrix.environment }}
            terraform plan -var-file="environments/${{ matrix.environment }}.tfvars" -input=false -out=tfplan
          else
            terraform plan -var-file="environments/${{ matrix.environment }}.tfvars" -input=false -out=tfplan
          fi
          terraform show -no-color tfplan > tfplan.txt
          
      - name: Comment PR with Plan
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const planPath = path.join('${{ matrix.module }}', 'tfplan.txt');
            
            if (fs.existsSync(planPath)) {
              const plan = fs.readFileSync(planPath, 'utf8');
              const output = `#### Terraform Plan: ${{ matrix.module }} (${{ matrix.environment }})
              
              <details><summary>Show Plan</summary>
              
              \`\`\`terraform
              ${plan}
              \`\`\`
              
              </details>`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              });
            }
          
      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ matrix.module }}-${{ matrix.environment }}
          path: |
            ${{ matrix.module }}/tfplan
            ${{ matrix.module }}/tfplan.txt
          retention-days: 30

  apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: plan
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    strategy:
      fail-fast: false
      matrix:
        environment: [dev]  # Only deploy to dev automatically
        module: [bootstrap-backend, gke-infra]
    environment: 
      name: ${{ matrix.environment }}
      url: ${{ steps.deploy.outputs.url }}
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
          project_id: ${{ secrets.GOOGLE_PROJECT_ID }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan-${{ matrix.module }}-${{ matrix.environment }}
          path: ${{ matrix.module }}
      
      - name: Terraform Init
        run: |
          cd ${{ matrix.module }}
          terraform init -input=false
      
      - name: Terraform Apply
        id: deploy
        run: |
          cd ${{ matrix.module }}
          if [ "${{ matrix.module }}" = "gke-infra" ]; then
            terraform workspace select ${{ matrix.environment }}
          fi
          terraform apply -input=false tfplan
          
          # Set outputs if available
          if terraform output -json > /dev/null 2>&1; then
            terraform output -json > outputs.json
            if [ -f outputs.json ]; then
              # Extract URL if available (adjust based on your outputs)
              url=$(jq -r '.cluster_endpoint.value // empty' outputs.json 2>/dev/null || echo "")
              if [ -n "$url" ]; then
                echo "url=$url" >> $GITHUB_OUTPUT
              fi
            fi
          fi
      
      - name: Notify Slack on Success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            ✅ Infrastructure deployment successful!
            Module: ${{ matrix.module }}
            Environment: ${{ matrix.environment }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      
      - name: Notify Slack on Failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            ❌ Infrastructure deployment failed!
            Module: ${{ matrix.module }}
            Environment: ${{ matrix.environment }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            Job: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Manual deployment job for stage and prod environments
  deploy-stage-prod:
    name: Deploy to Stage/Prod
    runs-on: ubuntu-latest
    needs: plan
    if: github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch'
    strategy:
      fail-fast: false
      matrix:
        environment: [stage, prod]
        module: [bootstrap-backend, gke-infra]
    environment: 
      name: ${{ matrix.environment }}
      url: ${{ steps.deploy.outputs.url }}
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
          project_id: ${{ secrets.GOOGLE_PROJECT_ID }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan-${{ matrix.module }}-${{ matrix.environment }}
          path: ${{ matrix.module }}
      
      - name: Terraform Init
        run: |
          cd ${{ matrix.module }}
          terraform init -input=false
      
      - name: Terraform Apply
        id: deploy
        run: |
          cd ${{ matrix.module }}
          if [ "${{ matrix.module }}" = "gke-infra" ]; then
            terraform workspace select ${{ matrix.environment }}
          fi
          terraform apply -input=false tfplan
      
      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          text: |
            Infrastructure deployment to ${{ matrix.environment }} completed
            Status: ${{ job.status }}
            Module: ${{ matrix.module }}
            Environment: ${{ matrix.environment }}
            Commit: ${{ github.sha }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}