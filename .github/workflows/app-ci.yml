name: FastAPI CI Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'mock-app/**'
      - 'infra/docker/**'
      - '.github/workflows/app-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'mock-app/**'
      - 'infra/docker/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/fastapi-app
  PYTHON_VERSION: "3.11"

jobs:
  # Security & Quality Gates
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './mock-app'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Code Quality & Testing
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          cd mock-app
          pip install -r requirements.txt

      - name: Code formatting check
        run: |
          cd mock-app
          black --check --diff .

      - name: Linting with flake8
        run: |
          cd mock-app
          flake8 .

      - name: Security check with bandit
        run: |
          cd mock-app
          bandit -r . -x venv --format json --output bandit-report.json || true

      - name: Dependency security check
        run: |
          cd mock-app
          safety scan --output json --output-file safety-report.json || true

      - name: Run tests with coverage
        run: |
          cd mock-app
          pytest --cov=. --cov-report=xml --cov-report=term

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./mock-app/coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Container Build & Security
  build-and-scan:
    name: Build and Scan Container
    runs-on: ubuntu-latest
    needs: [security-scan, test]
    permissions:
      contents: read
      packages: write
      security-events: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push container image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./infra/docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-image-results.sarif'

      - name: Upload Trivy container results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-image-results.sarif'

  # Trigger GitOps Deployment
  deploy:
    name: Trigger GitOps Deployment
    runs-on: ubuntu-latest
    needs: build-and-scan
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Update Argo CD Application
        run: |
          echo "Image built: ${{ needs.build-and-scan.outputs.image-tag }}"
          echo "Digest: ${{ needs.build-and-scan.outputs.image-digest }}"
          echo "GitOps deployment will be triggered by Argo CD Image Updater"